function out = Fading_or_ISIChan(in, prmLTE, chanMdl)
     persistent ChanObj
     if isempty( ChanObj)
          switch chanMdl 
              case 'flat-high-mobility'
                  ChanObj = comm.RayleighChannel(...
                    'SampleRate', prmLTE.chanSRate, ...
                    'PathDelays',0, ...
                    'AveragePathGains',0, ...
                    'NormalizePathGains',true, ...
                    'MaximumDopplerShift',70, ...
                    'RandomStream','mt19937ar with seed', ...
                    'Seed',22);
              case 'frequency-selective-high-mobility'
                 ChanObj = comm.RayleighChannel(...
                    'SampleRate', prmLTE.chanSRate, ...
                    'PathDelays',[0 10 20 30 100]*(1/prmLTE.chanSRate), ...
                    'AveragePathGains',[0 -3 -6 -8 -17.2], ...
                    'NormalizePathGains',true, ...
                    'MaximumDopplerShift',70, ...
                    'RandomStream','mt19937ar with seed', ...
                    'Seed',22);
          end
     end
    switch chanMdl
       case 'flat-high-mobility'
           out=step(ChanObj, in);
       case 'frequency-selective-high-mobility'
           out=step(ChanObj, in);
         case 'moderate-ISI'
            chCoeffs = [1; .2; .4];
            out = filter(chCoeffs,1,in);
        case 'severe-ISI'
            chCoeffs = [0.227 0.460 0.688 0.460 0.227];
            out = filter(chCoeffs,1,in);
        case 'none'
            out = in; %do nothing
     end
   
end